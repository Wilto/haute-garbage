---
permalink: service-worker.js
---

/*
This is a modified version of Ethan Marcotte’s SW (https://ethanmarcotte.com/theworkerofservices.js), which was a modified version of Jeremy Keith’s service worker (https://adactio.com/serviceworker.js), with a few additional edits borrowed from Filament Group’s. (https://www.filamentgroup.com/sw.js)

Thanks to both Jeremy and Filament Group for this, and everything else they do.

https://adactio.com/about/
https://www.filamentgroup.com/
*/

(function() {
	"use strict";

	const version = "{{ metadata.build }}";
	const cacheName = version + "::wiltomakesfood:";

	const staticCacheName = cacheName + "static";
	const pagesCacheName = cacheName + "pages";
	const imagesCacheName = cacheName + "images";

	const offlinePages = [
		"/",
		"/offline/"
	];
	const staticAssets = [
		"/service-worker.js?{{ metadata.build }}",
		'/_assets/js/offline.min.js?{{ metadata.build }}',
		'/_assets/js/offline-toggle.min.js?{{ metadata.build }}',
		'/_assets/js/lazyimg.min.js?{{ metadata.build }}',
		'/_assets/css/all.css?{{ metadata.build }}',
		'/_assets/img/wmf.png',
		'/_assets/css/fonts/OpenSans-Bold-webfont.woff',
		'/_assets/css/fonts/fanwood_text-webfont.woff',
		'/_assets/css/fonts/fanwood_text_italic-webfont.woff'
	];

	function updateStaticCache() {
		// These items won't block the installation of the Service Worker
		caches.open( staticCacheName )
			.then( cache => {
				// These items must be cached for the Service Worker to complete installation
				return cache.addAll( offlinePages.map( url => new Request( url, { credentials: 'include' } ) ) );
			});

		// These items must be cached for the Service Worker to complete installation
		return caches.open( staticCacheName )
			.then( cache => {
				return cache.addAll( staticAssets.map( url => new Request( url, { credentials: 'include' } ) ) );
			});
	}

	function stashInCache( cacheName, request, response ) {
		caches.open( cacheName )
			.then( cache => cache.put(request, response ) );
	}

	// Limit the number of items in a specified cache.
	function trimCache( cacheName, maxItems ) {
		caches.open( cacheName )
			.then( cache => {
				cache.keys()
					.then( keys => {
						if ( keys.length > maxItems ) {
							cache.delete( keys[ 0 ] )
								.then( trimCache( cacheName, maxItems ) );
						}
					} );
			});
	}

	// Remove caches whose name is no longer valid
	function clearOldCaches() {
		return caches.keys()
			.then( keys => {
				return Promise.all( keys
					.filter( key => key.indexOf( version ) !== 0)
					.map( key => caches.delete( key ) )
				);
			});
	}

	// Events!
	self.addEventListener( "message", event => {
		if ( event.data.command == "trimCaches" ) {
			trimCache( pagesCacheName, 35 );
			trimCache( imagesCacheName, 20 );
		}

		if ( event.data == "getCached" ) {
			caches.open( pagesCacheName ).then(function(cache) {
				return cache.keys().then(function(requests) {
					var urls = requests.filter(function(request){
						return request.url.indexOf("/offline/") === -1;
					}).map(function(request) {
						return request.url;
					});
					return urls.sort();
				}).then(function(urls) {
					event.ports[0].postMessage({
						"offline" : true,
						"urls" : urls
					});
				});
			});
		}
	});

	self.addEventListener( "install", event => {
		event.waitUntil( updateStaticCache()
			.then( () => self.skipWaiting() )
		);
	});

	self.addEventListener( "activate", event => {
		event.waitUntil( clearOldCaches()
			.then( () => self.clients.claim() )
		);
	});

	self.addEventListener( "fetch", event => {
		let request = event.request;
		let client = event.clientId;
		let url = new URL( request.url );

		// Ignore non-GET requests
		if ( request.method !== "GET" ) {
			return;
		}

		// For HTML requests, try the network first, fall back to the cache, finally the offline page
		if ( request.headers.get( "Accept" ).indexOf( "text/html" ) !== -1 ) {

			// Ignore query-string’d requests
			if ( request.url.indexOf( "?" ) !== -1 ) {
				return;
			}

			event.respondWith(
				fetch( request )
					.then( response => {
						// NETWORK
						// Stash a copy of this page in the pages cache
						let copy = response.clone();
						if ( offlinePages.includes( url.pathname ) || offlinePages.includes( url.pathname + "/" ) ) {
							stashInCache( staticCacheName, request, copy );
						} else {
							stashInCache( pagesCacheName, request, copy );
						}
						return response;
					} )
					.catch( () => {
						// CACHE or FALLBACK
						return caches.match( request )
							.then( response => response || caches.match( "/offline/" ) );
					} )
			);
			return;

		}

		// For non-HTML requests, look in the cache first, fall back to the network
		event.respondWith(
			caches.match( request )
				.then( response => {
					// CACHE
					return response || fetch( request )
						.then( response => {
							// NETWORK
							// If the request is for an image, stash a copy of this image in the images cache
							if ( request.headers.get( "Accept" ).indexOf( "image" ) !== -1 ) {
								let copy = response.clone();
								stashInCache( imagesCacheName, request, copy );
							}
							return response;
						})
						.catch( () => {
							// OFFLINE
							// If the request is for an image, show an offline placeholder
							if ( request.headers.get( "Accept" ).indexOf( "image" ) !== -1 ) {
								return new Response('<svg viewbox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><g fill="#000" fill-rule="evenodd" opacity=".153"><path d="M192.078 171.604c-2.53 2.99-4.448 3.913-5.812 3.913-1.306 0-1.8-1.016-1.8-2.177 0-.319.032-.646.092-.982-2.08 2.394-3.558 3.159-4.821 3.159-1.277 0-1.77-1.016-1.77-2.177 0-.358.04-.727.115-1.107-2.171 2.48-3.707 3.284-4.99 3.284-1.277 0-1.77-1.016-1.77-2.177 0-2.06 1.306-4.468 3.279-7.196l2.64-3.8c.146-.175.436-.175.552 0 .348.464.522 1.015.522 1.566 0 .522-.174 1.045-.493 1.509l-2.147 3.076c-.726 1.102-1.916 2.988-1.916 4.352 0 .464.175.726.494.726 1.337 0 3.557-2.461 5.581-5.354.41-.67.874-1.361 1.383-2.075l7.66-10.91c.145-.203.406-.203.551 0 .378.523.552.987.552 1.538s-.174 1.016-.523 1.509l-7.138 10.214c-.725 1.131-1.915 3.017-1.915 4.352 0 .464.145.755.493.755 1.282 0 3.408-2.382 5.344-5.196.445-.727.96-1.481 1.533-2.262l1.915-2.756c.117-.174 0-.377-.174-.377h-.203a.533.533 0 0 1-.551-.552c0-.232.145-.493.377-.493h1.364c.116 0 .232-.029.29-.116l2.466-3.569c.175-.232.494-.145.58-.029.378.493.552.987.552 1.538 0 .58-.203 1.102-.522 1.567-.203.29-.03.61.26.61h.262c.32 0 .551.29.551.55 0 .32-.232.494-.406.494h-1.654c-.145 0-.232.058-.29.174l-3.772 5.31c-.725 1.131-1.886 3.017-1.886 4.352 0 .493.174.755.493.755 1.35 0 3.71-2.237 5.915-5.44 1.82-3.165 5.241-6.196 8.274-6.196 1.219 0 2.38.754 2.38 2.553 0 2.35-1.596 5.862-3.918 8.27-.174.174 0 .435.232.348 2.09-.812 3.656-2.35 5.833-5.28.493.057.667.55.58 1.044-1.277 1.857-4.904 6.616-11.258 6.616-2.002 0-3.424-.958-3.424-3.308a5 5 0 0 1 .038-.605zM180.259 153c1.944 0 3.163 1.277 3.163 3.134 0 2.321-1.422 4.44-3.047 4.44-.522 0-.87-.407-.87-.958 0-1.045 1.044-2.176 1.944-2.176.174 0 .26.029.348.029.261 0 .522-.378.522-1.22 0-1.218-.638-2.233-2.002-2.233-6.877 0-10.243 22.458-19.412 22.458-2.553 0-4.091-1.886-4.294-4.236-.03-.32-.435-.435-.639-.203-1.886 2.292-4.41 4.44-6.905 4.44-2.64 0-4.12-2.06-4.12-4.817 0-8.241 13.318-13.812 13.318-16.51 0-.726-.87-1.045-2.264-1.045-6.644 0-12.912 4.961-12.912 8.27 0 1.044.639 1.798 1.8 1.856.347.03.492.494.173.697-.435.29-.957.435-1.538.435-1.421 0-2.524-.958-2.524-2.728 0-4.12 7.109-9.604 14.653-9.604 3.134 0 3.917 1.132 3.917 2.118 0 4.15-11.896 9.372-11.896 16.54 0 1.711.812 2.843 2.03 2.843 1.829 0 4.585-2.38 7.255-6.151l8.647-12.303a.353.353 0 0 1 .58 0 2.63 2.63 0 0 1 .522 1.596c0 .55-.174 1.073-.493 1.538l-4.323 6.18c-2.002 2.844-2.554 4.527-2.554 6.122 0 1.974.958 3.018 2.35 3.018 7.4 0 7.98-21.53 18.571-21.53zm21.153 10.01c-2.292 0-7.022 5.978-7.022 9.46 0 .551.203 1.16.9 1.16 2.35 0 7.167-5.803 7.167-9.198 0-.783-.262-1.421-1.045-1.421zM155.126 201.574l-4.753-16.739h-.143c.222 2.851.334 5.066.334 6.645v10.094H145v-23.24h8.361l4.849 16.5h.127l4.753-16.5h8.377v23.24h-5.77v-10.19c0-.53.007-1.118.023-1.764.016-.646.088-2.23.215-4.753h-.143l-4.69 16.707h-5.976zm34.796 0l-1.144-4.356h-7.55l-1.177 4.356h-6.899l7.582-23.336h8.378l7.677 23.336h-6.867zm-2.448-9.506l-1.001-3.815c-.233-.848-.517-1.945-.85-3.29-.334-1.346-.554-2.31-.66-2.894a64.75 64.75 0 0 1-.564 2.67c-.281 1.24-.904 3.683-1.868 7.329h4.943zm30.87 9.506h-7.089l-4.594-8.886-1.86 1.113v7.773h-6.31v-23.24h6.31v10.094c.318-.625.96-1.616 1.924-2.973l4.88-7.121h6.867l-7.328 10.412 7.2 12.828zm15.5 0h-13.798v-23.24h13.798v5.039h-7.52v3.656h6.963v5.039h-6.962v4.387h7.519v5.119zm18.455-7.058c0 1.441-.365 2.72-1.097 3.839-.73 1.118-1.785 1.987-3.163 2.607-1.378.62-2.994.93-4.848.93-1.547 0-2.846-.109-3.895-.326-1.049-.217-2.14-.596-3.274-1.137v-5.595a18.7 18.7 0 0 0 3.735 1.438c1.293.345 2.48.517 3.561.517.933 0 1.616-.162 2.05-.485.435-.323.652-.739.652-1.248 0-.318-.087-.596-.262-.834-.175-.239-.456-.48-.842-.723-.387-.244-1.418-.742-3.092-1.495-1.516-.688-2.652-1.356-3.41-2.003-.758-.646-1.32-1.388-1.685-2.225-.366-.837-.548-1.828-.548-2.973 0-2.14.779-3.81 2.336-5.007 1.558-1.197 3.699-1.796 6.422-1.796 2.406 0 4.86.556 7.36 1.67l-1.923 4.847c-2.173-.996-4.048-1.494-5.627-1.494-.816 0-1.41.143-1.78.43-.372.285-.557.64-.557 1.064 0 .456.236.864.707 1.224.472.36 1.751 1.018 3.84 1.971 2.002.901 3.393 1.868 4.172 2.901.779 1.034 1.168 2.334 1.168 3.903zM156.032 213.082v8.568h7.952v8.107h-7.952v16.317H145v-41.048h21.704v8.056h-10.672zm28.025 1.744c0-.547-.222-.975-.667-1.282-.445-.308-.992-.462-1.642-.462-.65 0-1.197.154-1.642.462-.444.307-.667.735-.667 1.282v21.448c0 .547.223.974.667 1.282.445.308.992.462 1.642.462.65 0 1.197-.154 1.642-.462.445-.308.667-.735.667-1.282v-21.448zm11.288 22.115c0 1.402-.342 2.719-1.026 3.95-.684 1.232-1.633 2.31-2.848 3.233-1.214.924-2.65 1.65-4.31 2.18-1.659.53-3.463.796-5.413.796-1.95 0-3.754-.265-5.413-.795-1.659-.53-3.096-1.257-4.31-2.181-1.214-.924-2.164-2.001-2.848-3.233a8.009 8.009 0 0 1-1.026-3.95v-22.782c0-1.402.342-2.72 1.026-3.95.684-1.232 1.634-2.31 2.848-3.233 1.214-.924 2.651-1.65 4.31-2.18 1.659-.53 3.463-.796 5.413-.796 1.95 0 3.754.265 5.413.795 1.66.53 3.096 1.257 4.31 2.18 1.215.925 2.164 2.002 2.848 3.233a8.009 8.009 0 0 1 1.026 3.951v22.782zm18.174-22.115c0-.547-.222-.975-.667-1.282-.444-.308-.992-.462-1.642-.462-.65 0-1.197.154-1.642.462-.444.307-.667.735-.667 1.282v21.448c0 .547.223.974.667 1.282.445.308.992.462 1.642.462.65 0 1.198-.154 1.642-.462.445-.308.667-.735.667-1.282v-21.448zm11.288 22.115c0 1.402-.342 2.719-1.026 3.95-.684 1.232-1.633 2.31-2.847 3.233-1.215.924-2.651 1.65-4.31 2.18-1.66.53-3.464.796-5.414.796-1.95 0-3.754-.265-5.413-.795-1.659-.53-3.095-1.257-4.31-2.181-1.214-.924-2.163-2.001-2.847-3.233a8.009 8.009 0 0 1-1.027-3.95v-22.782c0-1.402.342-2.72 1.027-3.95.684-1.232 1.633-2.31 2.847-3.233 1.215-.924 2.651-1.65 4.31-2.18 1.66-.53 3.464-.796 5.413-.796 1.95 0 3.754.265 5.414.795 1.659.53 3.095 1.257 4.31 2.18 1.214.925 2.163 2.002 2.847 3.233a8.009 8.009 0 0 1 1.026 3.951v22.782zm17.61-21.96c0-1.095-.633-1.643-1.898-1.643h-2.104v24.475h2.104c1.265 0 1.898-.547 1.898-1.642v-21.19zm10.365 22.575c0 1.3-.265 2.472-.796 3.515a8.592 8.592 0 0 1-2.129 2.694 9.305 9.305 0 0 1-3.104 1.719 11.85 11.85 0 0 1-3.771.59h-15.599v-41.048h15.599c1.334 0 2.59.197 3.77.59a9.305 9.305 0 0 1 3.105 1.72c.89.752 1.6 1.65 2.13 2.693.53 1.043.795 2.215.795 3.515v24.012z"/></g></svg>', {headers: {"Content-Type": "image/svg+xml", "Cache-Control": "no-store"}});
							}
						});
				})
		);
	});
} )();
